{"version":3,"sources":["components/GameInfoBoard/GameInfoBoard.tsx","components/Board/Board.utils.ts","components/Board/Board.style.ts","components/Candy/Candy.tsx","data/candyColors.ts","components/Tile/Tile.style.ts","components/Tile/Tile.tsx","components/Board/Board.tsx","components/GameInfoBoard/GameInfoBoard.styles.ts","components/GameInfoBoard/GameInfoBoard.utils.ts","components/GameOver/GameOver.style.ts","components/GameOver/GameOver.tsx","App.tsx","index.tsx"],"names":["timeInterval","matrixArray","board","map","_","colIdx","row","createBoard","size","numbers","make2dArray","Array","fill","sample","isEqual","checkForAllMatches","checkForMatchesHorizontal","subsTilesToGo","tiles","cloneDeep","boardSize","length","newBoard","i","queue","j","push","index","getValuesDown","toggleArray","tilePos","nextTileIndex","x","y","toggle","hotizontal","vertical","pos","Wrapper","styled","div","Candy","primaryColor","secondaryColor","id","enableBackground","height","viewBox","width","xmlns","d","candyData","tileId","Cell","playable","Tile","dragStart","dragOver","dragEnd","tile","isPlayable","candyColors","draggable","onDragStart","onDragOver","onDragEnd","Board","move","setIsPlayable","setBoard","useState","firstDraggedDiv","setFirstDraggedDiv","useEffect","timeoutId","setTimeout","some","hasEmptyTiles","prevBoard","num","addNewRow","clearInterval","handleDragStart","e","screenX","screenY","handleDragOver","preventDefault","dataTransfer","effectAllowed","handleDragEnd","direction","offsetX","offsetY","isHorizontal","Math","abs","calculateDirection","newPosition","calculateNewPosition","newPos","Object","values","every","coord","boardBeforeMove","boardAfterMove","dir","swipeTiles","TILE_SPEED_MS","decimal","toString","padStart","displayTime","time","Number","mn","floor","sc","GameInfoBoard","moves","tilesToGo","tileToSearch","setTime","setInterval","prev","motion","GameOver","isWin","newGame","initial","opacity","animate","transition","delay","duration","onClick","NUMBERS","App","initalBoard","setIsPLayable","setMoves","setTilesToGo","setTileToSearch","randomIdx","random","useCallback","gameOver","style","textAlign","fontSize","margin","color","quan","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b8ab8e3.chunk.js","sourcesContent":["import { FC, useEffect, useState } from \"react\";\r\nimport * as S from \"./GameInfoBoard.styles\";\r\nimport Candy from \"../Candy/Candy\";\r\nimport { displayTime } from \"./GameInfoBoard.utils\";\r\nimport { CandyData } from \"../../data/candyColors\";\r\n\r\ninterface GameInfoBoardProps {\r\n  moves: number;\r\n  tilesToGo: number;\r\n  tileToSearch: CandyData | null;\r\n}\r\n\r\nlet timeInterval: NodeJS.Timeout;\r\n\r\nconst GameInfoBoard: FC<GameInfoBoardProps> = ({\r\n  moves,\r\n  tilesToGo,\r\n  tileToSearch,\r\n}) => {\r\n  const [time, setTime] = useState(0);\r\n\r\n  const startCount = (): void => {\r\n    timeInterval = setInterval(() => {\r\n      setTime(prev => Number(prev) + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  const stopCount = (): void => clearInterval(timeInterval);\r\n\r\n  useEffect(() => {\r\n    startCount();\r\n    return () => stopCount();\r\n  }, []);\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <p>moves: {moves}</p>\r\n      <p>time: {displayTime(time)}</p>\r\n\r\n      {tileToSearch?.primaryColor && (\r\n        <p>\r\n          to go:{\" \"}\r\n          <Candy\r\n            primaryColor={tileToSearch.primaryColor}\r\n            secondaryColor='black'\r\n            size='20'\r\n          />\r\n          x {tilesToGo}\r\n        </p>\r\n      )}\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default GameInfoBoard;\r\n","import _ from \"lodash\";\r\nimport { NextIndexes, TilePos } from \"./Board.types\";\r\n\r\nexport const matrixArray = (board: number[][]): number[][] =>\r\n    board[0].map((_, colIdx) => board.map(row => row[colIdx]));\r\n\r\nexport const createBoard = (size: number, numbers: number[]): number[][] => {\r\n    const make2dArray = (size: number) => Array(size)\r\n        .fill(null)\r\n        .map(() =>\r\n            Array(size)\r\n                .fill(0)\r\n                .map(() => _.sample(numbers)!)\r\n        );\r\n    let board = make2dArray(size)\r\n    while (!_.isEqual(board, checkForAllMatches(board))) {\r\n        board = make2dArray(size)\r\n    }\r\n    return board\r\n};\r\n\r\nconst checkForMatchesHorizontal = (board: number[][], subsTilesToGo?: (id: number, quan: number) => void): number[][] => {\r\n    const tiles = _.cloneDeep(board);\r\n    const boardSize = tiles.length;\r\n\r\n    const newBoard: number[][] = [];\r\n\r\n    for (let i = 0; i < boardSize; i++) {\r\n        const row = tiles[i];\r\n        let queue: number[] = [row[0]];\r\n\r\n\r\n        for (let j = 1; j < boardSize + 1; j++) {\r\n            if (row[j] === queue[0]) {\r\n                queue.push(row[j]);\r\n            } else {\r\n                if (queue.length >= 3) {\r\n                    for (let index = 1; index <= queue.length; index++) {\r\n                        row[j - index] = 0;\r\n\r\n                    }\r\n                    subsTilesToGo && subsTilesToGo(queue[0], queue.length)\r\n                }\r\n                queue = [row[j]];\r\n            }\r\n        }\r\n        newBoard.push(row);\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const hasEmptyTiles = (board: number[][]): boolean =>\r\n    board.some(row => row.some(tile => tile === 0));\r\n\r\nexport const getValuesDown = (board: number[][]): number[][] => {\r\n    const newBoard = _.cloneDeep(board);\r\n\r\n    for (let i = 1; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            if (newBoard[i][j] === 0) {\r\n                newBoard[i][j] = newBoard[i - 1][j];\r\n                newBoard[i - 1][j] = 0;\r\n            }\r\n        }\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nexport const addNewRow = (board: number[][], numbers: number[]): number[][] => {\r\n    const newBoard = _.cloneDeep(board);\r\n    newBoard[0] = newBoard[0].map(num => (num === 0 ? _.sample(numbers)! : num));\r\n    return newBoard;\r\n};\r\n\r\nexport const checkForAllMatches = (board: number[][], subsTilesToGo?: (id: number, quan: number) => void): number[][] => {\r\n    let newBoard = _.cloneDeep(board);\r\n    newBoard = checkForMatchesHorizontal(newBoard, subsTilesToGo);\r\n    newBoard = matrixArray(checkForMatchesHorizontal(matrixArray(newBoard), subsTilesToGo));\r\n    return newBoard;\r\n};\r\n\r\n// \r\n\r\nconst toggleArray = (\r\n    board: number[][],\r\n    tilePos: TilePos,\r\n    nextTileIndex: -1 | 0 | 1\r\n): number[][] => {\r\n    const newBoard = _.cloneDeep(board);\r\n    const { x, y } = tilePos;\r\n\r\n    [newBoard[y][x], newBoard[y][x + nextTileIndex]] = [\r\n        newBoard[y][x + nextTileIndex],\r\n        newBoard[y][x]\r\n    ];\r\n\r\n    return newBoard;\r\n};\r\n\r\nconst reverseCoords = (pos: TilePos): TilePos => ({\r\n    y: pos.x,\r\n    x: pos.y\r\n});\r\n\r\n\r\nconst toggle = {\r\n    hotizontal: (\r\n        board: number[][],\r\n        tilePos: TilePos,\r\n        nextTileIndex: 1 | 0 | -1\r\n    ) => toggleArray(board, tilePos, nextTileIndex),\r\n    vertical: (\r\n        board: number[][],\r\n        tilePos: TilePos,\r\n        nextTileIndex: 1 | 0 | -1\r\n    ) =>\r\n        matrixArray(\r\n            toggleArray(matrixArray(board), reverseCoords(tilePos), nextTileIndex)\r\n        )\r\n};\r\n\r\nexport const swipeTiles = (\r\n    board: number[][],\r\n    pos: TilePos,\r\n    dir: NextIndexes\r\n): number[][] => {\r\n\r\n    const isHorizontal = dir.x !== 0\r\n\r\n    const nextTileIndex = isHorizontal ? dir.x : dir.y\r\n\r\n    return toggle[isHorizontal ? \"hotizontal\" : \"vertical\"](\r\n        board,\r\n        pos,\r\n        nextTileIndex\r\n    );\r\n}\r\n\r\n// \r\n\r\nexport const calculateDirection = (\r\n    offsetX: number,\r\n    offsetY: number\r\n): NextIndexes | null => {\r\n    const isHorizontal = Math.abs(offsetX) > Math.abs(offsetY);\r\n    const OFFSET_TO_MAKE_MOVE = 20\r\n    if (Math.abs(offsetX) < OFFSET_TO_MAKE_MOVE && Math.abs(offsetY) < OFFSET_TO_MAKE_MOVE) {\r\n        return null\r\n    }\r\n\r\n    const x = offsetX > 0 ? 1 : -1;\r\n    const y = offsetY > 0 ? 1 : -1;\r\n\r\n    return {\r\n        x: 0 + (isHorizontal ? x : 0),\r\n        y: 0 + (!isHorizontal ? y : 0),\r\n    } as NextIndexes\r\n};\r\n\r\nexport const calculateNewPosition = (\r\n    tilePos: TilePos,\r\n    direction: TilePos\r\n): TilePos => {\r\n    const x = tilePos.x + direction.x;\r\n    const y = tilePos.y + direction.y;\r\n\r\n    return { x, y };\r\n};\r\n\r\nexport const isValidMove = (newPos: TilePos, boardSize: number): boolean => {\r\n    const coords = Object.values(newPos);\r\n    return coords.every(coord => coord >= 0 && coord <= boardSize - 1);\r\n};","import styled from \"styled-components\";\r\n\r\ninterface WrapperProps {\r\n    size: number\r\n}\r\n\r\nexport const Wrapper = styled.div<WrapperProps>`\r\n    width: 600px;\r\n    height: 600px;\r\n    display: grid;\r\n    grid-template: repeat(${({ size }) => size}, 1fr) /  repeat(${({ size }) => size}, 1fr);\r\n    background-color: aliceblue;\r\n    position: relative;\r\n    \r\n`\r\n\r\n","// import { lightenColor } from \"../../utils/lightenColor\";\r\n\r\ninterface CandyProps {\r\n  primaryColor: string;\r\n  secondaryColor: string;\r\n  size?: string;\r\n}\r\n\r\nconst Candy: React.FC<CandyProps> = ({\r\n  primaryColor,\r\n  secondaryColor,\r\n  size,\r\n}) => {\r\n  return (\r\n    <svg\r\n      id='Capa_1'\r\n      enableBackground='new 0 0 512.018 512.018'\r\n      height={size ? size : \"50\"}\r\n      viewBox='0 0 512.018 512.018'\r\n      width={size ? size : \"50\"}\r\n      xmlns='http://www.w3.org/2000/svg'\r\n    >\r\n      <g>\r\n        <path\r\n          d='m5.186 340.827c-4.919 4.258-6.532 11.202-3.994 17.193s8.653 9.676 15.13 9.089c16.049-1.417 25.967 2.008 36.596 12.636 14.294 14.294 21.651 29.8 20.184 42.54-1.105 9.59 7.027 17.725 16.617 16.617 12.603-1.454 28.012 5.896 42.274 20.158 10.691 10.692 12.506 23.097 12.847 38.277.295 13.143 16.266 19.607 25.603 10.27 47.469-47.468 52.936-124.424 5.657-171.703-45.531-45.534-122.987-36.566-170.914 4.923z'\r\n          fill='#74dce2'\r\n        />\r\n        <path\r\n          d='m176.1 335.905-98.703 98.703c3.237 3.236 7.774 4.82 12.322 4.294 12.603-1.454 28.012 5.896 42.274 20.158 10.691 10.692 12.506 23.097 12.847 38.277.296 13.183 16.322 19.552 25.603 10.27 47.469-47.468 52.936-124.422 5.657-171.702z'\r\n          fill='#3ac7cf'\r\n        />\r\n        <path\r\n          d='m497.339 144.838c-15.152-.34-27.529-1.997-38.327-12.795-14.237-14.236-21.565-29.664-20.107-42.326 1.108-9.62-7.058-17.727-16.617-16.617-12.804 1.464-28.324-5.865-42.592-20.133-10.597-10.597-14.007-20.529-12.584-36.646.572-6.48-3.099-12.592-9.09-15.131-5.991-2.538-12.935-.926-17.193 3.994-41.494 47.934-50.466 125.372-4.922 170.914 47.275 47.276 124.228 41.818 171.703-5.657 9.304-9.305 2.919-25.309-10.271-25.603z'\r\n          fill='#74dce2'\r\n        />\r\n        <path\r\n          d='m507.61 170.44c9.304-9.304 2.919-25.309-10.271-25.603-15.152-.34-27.529-1.997-38.327-12.795-14.237-14.236-21.565-29.664-20.107-42.326.524-4.548-1.057-9.084-4.294-12.322l-98.703 98.704c46.988 46.99 123.911 42.133 171.702-5.658z'\r\n          fill='#3ac7cf'\r\n        />\r\n        <path\r\n          d='m370.893 293.111-21.21 21.21 23.49 23.5c-9.187 13.4-21.194 25.634-35.35 35.36l-23.5-23.5-21.21 21.21 17.04 17.04c-16.84 6.68-35.15 10.17-54.15 10.17-80.131 0-142.1-61.85-142.1-142.1 0-19 3.49-37.31 10.17-54.15l18.58 18.58c9.77-3.86 19.04-8.8 27.67-14.75l-31.5-31.5c9.237-13.446 21.25-25.676 35.36-35.35l25.32 25.32c5.96-8.61 10.89-17.88 14.76-27.65l-12.42-12.43c16.85-6.67 35.16-10.17 54.16-10.17 80.131 0 142.1 61.85 142.1 142.1 0 19-3.5 37.31-10.17 54.16z'\r\n          fill={primaryColor}\r\n        />\r\n        <path\r\n          d='m370.893 293.111-21.21 21.21 23.49 23.5c-9.187 13.4-21.194 25.634-35.35 35.36l-23.5-23.5-21.21 21.21 17.04 17.04c-50.505 20.033-113.396 11.048-155.27-30.81l202.24-202.24c41.71 41.726 50.879 104.581 30.81 155.28z'\r\n          fill={primaryColor}\r\n        />\r\n        <path\r\n          d='m337.823 373.181c-8.63 5.95-17.9 10.89-27.67 14.75l-186.08-186.08c3.86-9.77 8.8-19.04 14.75-27.67z'\r\n          fill='#fef77d'\r\n        />\r\n        <path\r\n          d='m310.153 387.931c9.77-3.86 19.04-8.8 27.67-14.75l-99.5-99.5-21.21 21.21z'\r\n          fill='#f4de48'\r\n        />\r\n        <path\r\n          d='m387.933 310.161c-3.87 9.77-8.8 19.04-14.76 27.66l-198.99-198.99c8.62-5.96 17.89-10.89 27.66-14.76z'\r\n          fill='#fef77d'\r\n        />\r\n        <path\r\n          d='m373.173 337.821c5.96-8.62 10.89-17.89 14.76-27.66l-93.045-93.045-21.21 21.21z'\r\n          fill='#f4de48'\r\n        />\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Candy;\r\n","export type CandyData = {\r\n    primaryColor: string,\r\n    secondaryColor: string,\r\n    tileId: number\r\n}\r\n\r\nconst candyData: CandyData[] = [\r\n    {\r\n        tileId: 0,\r\n        primaryColor: \"#FE0000\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 1,\r\n        primaryColor: \"#FFEB00\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 2,\r\n        primaryColor: \"#00A8FF\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 3,\r\n        primaryColor: \"#AE00FF\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 4,\r\n        primaryColor: \"#FE6A00\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 5,\r\n        primaryColor: \"#00A800\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n    {\r\n        tileId: 6,\r\n        primaryColor: \"#FE0000\",\r\n        secondaryColor: \"#3AC7CF\",\r\n    },\r\n\r\n]\r\n\r\nexport default candyData","import styled from \"styled-components\";\r\ninterface CellProps {\r\n    playable: boolean\r\n}\r\n\r\n\r\nexport const Cell = styled.div<CellProps>`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2rem;\r\n    border: 1px solid brown;\r\n    background-color: #ddd;\r\n    padding: 5px;\r\n    cursor: ${({ playable }) => playable ? \"grab\" : \"default\"};\r\n`;","import { FC } from \"react\";\r\nimport Candy from \"../Candy/Candy\";\r\nimport candyColors from \"../../data/candyColors\";\r\nimport * as S from \"./Tile.style\";\r\n\r\ninterface TileProps {\r\n  dragStart: (e: React.DragEvent<HTMLDivElement>) => void;\r\n  dragOver: (e: React.DragEvent<HTMLDivElement>) => void;\r\n  dragEnd: (e: React.DragEvent<HTMLDivElement>) => void;\r\n  tile: number;\r\n  id: string;\r\n  isPlayable: boolean;\r\n}\r\n\r\nconst Tile: FC<TileProps> = ({\r\n  dragStart,\r\n  dragOver,\r\n  dragEnd,\r\n  tile,\r\n  id,\r\n  isPlayable,\r\n}) => {\r\n  const { primaryColor, secondaryColor } = candyColors[tile];\r\n\r\n  //\r\n  return (\r\n    <S.Cell\r\n      draggable\r\n      onDragStart={dragStart}\r\n      onDragOver={dragOver}\r\n      onDragEnd={dragEnd}\r\n      id={id}\r\n      playable={isPlayable}\r\n    >\r\n      {tile ? (\r\n        <Candy primaryColor={primaryColor} secondaryColor='#74dce2' />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </S.Cell>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import { Dispatch, useEffect, useState } from \"react\";\r\nimport {\r\n  checkForAllMatches,\r\n  hasEmptyTiles,\r\n  addNewRow,\r\n  getValuesDown,\r\n  swipeTiles,\r\n  calculateDirection,\r\n  calculateNewPosition,\r\n  isValidMove,\r\n} from \"./Board.utils\";\r\nimport _ from \"lodash\";\r\nimport * as S from \"./Board.style\";\r\nimport { TilePos } from \"./Board.types\";\r\nimport Tile from \"../Tile/Tile\";\r\n\r\nconst TILE_SPEED_MS = 300;\r\n\r\ninterface BoardProps {\r\n  move: () => void;\r\n  subsTilesToGo: (id: number, quan: number) => void;\r\n  isPlayable: boolean;\r\n  setIsPlayable: Dispatch<React.SetStateAction<boolean>>;\r\n  board: number[][];\r\n  setBoard: Dispatch<React.SetStateAction<number[][]>>;\r\n  numbers: number[];\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({\r\n  move,\r\n  subsTilesToGo,\r\n  isPlayable,\r\n  setIsPlayable,\r\n  board,\r\n  setBoard,\r\n  numbers,\r\n}) => {\r\n  const [firstDraggedDiv, setFirstDraggedDiv] = useState<TilePos | null>(null);\r\n\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      if (hasEmptyTiles(board)) {\r\n        setBoard(prevBoard => addNewRow(getValuesDown(prevBoard), numbers));\r\n        setIsPlayable(true);\r\n\r\n        return () => clearInterval(timeoutId);\r\n      }\r\n      if (!isPlayable && !_.isEqual(board, checkForAllMatches(board))) {\r\n        const newBoard = checkForAllMatches(board, subsTilesToGo);\r\n        setBoard(newBoard);\r\n      } else {\r\n        setBoard(getValuesDown);\r\n      }\r\n    }, TILE_SPEED_MS);\r\n\r\n    if (\r\n      !_.isEqual(board, getValuesDown(board)) ||\r\n      !_.isEqual(board, checkForAllMatches(board))\r\n    ) {\r\n      setIsPlayable(false);\r\n    }\r\n    return () => clearInterval(timeoutId);\r\n  }, [board, isPlayable]);\r\n\r\n  const handleDragStart = (e: React.DragEvent<HTMLDivElement>) => {\r\n    if (!isPlayable) {\r\n      return;\r\n    }\r\n\r\n    setFirstDraggedDiv({\r\n      x: e.screenX,\r\n      y: e.screenY,\r\n    });\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    e.dataTransfer.effectAllowed = \"copyMove\";\r\n  };\r\n\r\n  const handleDragEnd = (\r\n    e: React.DragEvent<HTMLDivElement>,\r\n    tilePos: TilePos\r\n  ) => {\r\n    if (!isPlayable || !firstDraggedDiv) {\r\n      return;\r\n    }\r\n\r\n    const offsetX = e.screenX - firstDraggedDiv.x;\r\n    const offsetY = e.screenY - firstDraggedDiv.y;\r\n\r\n    const direction = calculateDirection(offsetX, offsetY);\r\n\r\n    if (!direction) {\r\n      return;\r\n    }\r\n\r\n    const newPosition = calculateNewPosition(tilePos, direction);\r\n\r\n    if (!isValidMove(newPosition, board.length)) {\r\n      return;\r\n    }\r\n\r\n    const boardBeforeMove = _.cloneDeep(board);\r\n    const boardAfterMove = swipeTiles(board, tilePos, direction);\r\n    setBoard(boardAfterMove);\r\n\r\n    if (_.isEqual(boardAfterMove, checkForAllMatches(boardAfterMove))) {\r\n      setIsPlayable(false);\r\n      setTimeout(() => {\r\n        setBoard(boardBeforeMove);\r\n        setIsPlayable(true);\r\n      }, TILE_SPEED_MS * 2);\r\n    } else {\r\n      move();\r\n    }\r\n\r\n    setFirstDraggedDiv(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isPlayable ? \"Make a move\" : \"Combo\"}\r\n      <S.Wrapper size={board.length}>\r\n        {board.map((row, y) =>\r\n          row.map((tile, x) => (\r\n            <Tile\r\n              key={`${y}${x}`}\r\n              id={`${y}${x}`}\r\n              dragStart={handleDragStart}\r\n              dragOver={handleDragOver}\r\n              dragEnd={e => handleDragEnd(e, { y, x })}\r\n              tile={tile}\r\n              isPlayable={isPlayable}\r\n            />\r\n          ))\r\n        )}\r\n      </S.Wrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    color: #fe4010;\r\n    justify-content: space-between;\r\n\r\n    p {\r\n        margin: 0;\r\n        font-size: 1.4rem;\r\n        text-transform: uppercase;\r\n        font-family: 'Annie Use Your Telescope', cursive !important;\r\n        color: aquamarine;\r\n\r\n        svg {\r\n            transform: translateY(2px) ;\r\n            margin-right: 5px;\r\n        }\r\n    }\r\n`","const decimal = (num: number): string => {\r\n    return num.toString().padStart(2, \"0\");\r\n};\r\n\r\nexport const displayTime = (time: number | null): string => {\r\n    time = Number(time)\r\n    if (time < 0) {\r\n        return `00:00`\r\n    }\r\n    const mn = Math.floor(time / 60);\r\n    const sc = time % 60;\r\n    return `${decimal(mn)}:${decimal(sc)}`;\r\n};","import { motion } from \"framer-motion\"\r\nimport styled from \"styled-components\"\r\n\r\n\r\nexport const Wrapper = styled(motion.div)`\r\n    position: fixed;\r\n    overflow: hidden;\r\n    \r\n       top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n    height: 100%;\r\n    z-index: 5;\r\n    background-color: rgba(0,0,0, .4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    div {\r\n        display: flex;\r\n        flex-direction: column;\r\n        background-color: rgba(244,244,244, 0.6);\r\n        width: 30%;\r\n        height: 30%;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: .5rem;\r\n\r\n        button {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n`\r\n\r\n","import { FC } from \"react\";\r\nimport * as S from \"./GameOver.style\";\r\n\r\ninterface GAmeOverProps {\r\n  isWin: boolean;\r\n  newGame: () => void;\r\n}\r\n\r\nconst GameOver: FC<GAmeOverProps> = ({ isWin, newGame }) => {\r\n  return (\r\n    <S.Wrapper\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ delay: 1, duration: 0.5 }}\r\n    >\r\n      <div>\r\n        <h2> {isWin ? \"Congratulations!\" : \"Game Over\"} </h2>\r\n        <button onClick={newGame}>{isWin ? \"Play Again\" : \"Try Again\"}</button>\r\n      </div>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport Board from \"./components/Board/Board\";\r\nimport GameInfoBoard from \"./components/GameInfoBoard/GameInfoBoard\";\r\nimport candyData, { CandyData } from \"./data/candyColors\";\r\nimport { createBoard } from \"./components/Board/Board.utils\";\r\nimport GameOver from \"./components/GameOver/GameOver\";\r\n\r\nconst BOARD_SIZE = 10;\r\nconst NUMBERS = [1, 2, 3, 4, 5];\r\nconst MAX_MOVES = 15;\r\nconst NUM_TILES_TO_GO = 35;\r\n\r\nconst App = () => {\r\n  const initalBoard = createBoard(BOARD_SIZE, NUMBERS);\r\n  const [board, setBoard] = useState<number[][]>(initalBoard);\r\n  const [isPlayable, setIsPLayable] = useState(true);\r\n  const [moves, setMoves] = useState(MAX_MOVES);\r\n  const [tilesToGo, setTilesToGo] = useState(NUM_TILES_TO_GO);\r\n  const [tileToSearch, setTileToSearch] = useState<CandyData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const randomIdx = _.random(1, 5);\r\n    const tileData = candyData[randomIdx];\r\n    setTileToSearch(tileData);\r\n  }, []);\r\n\r\n  const move = useCallback(() => setMoves(prev => prev - 1), []);\r\n\r\n  const subsTilesToGo = (id: number, quan: number) => {\r\n    if (id !== tileToSearch?.tileId) {\r\n      return;\r\n    }\r\n\r\n    setTilesToGo(prev => Math.max(prev - quan, 0));\r\n  };\r\n\r\n  const newGame = () => {\r\n    setMoves(15);\r\n    setTilesToGo(35);\r\n\r\n    const randomIdx = _.random(1, 5);\r\n    const tileData = candyData[randomIdx];\r\n    setTileToSearch(tileData);\r\n\r\n    setBoard(createBoard(BOARD_SIZE, NUMBERS));\r\n  };\r\n\r\n  const gameOver = isPlayable && (moves === 0 || tilesToGo === 0);\r\n\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: \"center\",\r\n          fontSize: \"3rem\",\r\n          margin: \"0\",\r\n          color: \"pink\",\r\n        }}\r\n      >\r\n        Candy Crush Clone\r\n      </h1>\r\n      <GameInfoBoard\r\n        moves={moves}\r\n        tilesToGo={tilesToGo}\r\n        tileToSearch={tileToSearch}\r\n      />\r\n      {tileToSearch?.tileId ? (\r\n        <Board\r\n          move={move}\r\n          subsTilesToGo={subsTilesToGo}\r\n          isPlayable={isPlayable}\r\n          setIsPlayable={setIsPLayable}\r\n          board={board}\r\n          setBoard={setBoard}\r\n          numbers={NUMBERS}\r\n        />\r\n      ) : (\r\n        \"loading\"\r\n      )}\r\n      {gameOver && <GameOver isWin={tilesToGo === 0} newGame={newGame} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}